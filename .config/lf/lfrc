# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

set icons
set previewer pistol

# use enter for shell commands
# map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
cmd open ${{
    case "${f##*.}" in
        vclip) setsid vclip.sh "${f}" > /dev/null 2> /dev/null &;;
        *)
            case $(file --mime-type $f -b) in
                text/*) $EDITOR $fx;;
                application/pdf) zathura $fx;;
                application/octet-stream) mpv $fx;;
                *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
            esac
            ;;
    esac

}}

cmd paste &{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        tsp lf_cp.sh $list .
    elif [ $mode = 'move' ]; then
        tsp lf_mv.sh $list .
    fi
}}

cmd link %{{
    # set -- $(cat ~/.local/share/lf/files)
    # mode="$1"
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    # shift
    if [ "${#list}" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "${list}";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    # rm ~/.local/share/lf/files
    lf -remote "send clear"
}}
map P :link

map f

cmd fzf_dir ${{
    res="$(ls|fzf --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"
   fi
lf -remote "send $id $cmd \"$res\""
}}
map ff :fzf_dir

cmd fzf_rdir ${{
   res="$(fd -t d|fzf --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"
   fi
lf -remote "send $id $cmd \"$res\""
}}
map fd :fzf_rdir

cmd fzf_jump ${{
   # res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location')"
   res="$(fd 2>/dev/null | fzf --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"
   fi
lf -remote "send $id $cmd \"$res\""
}}
map fr :fzf_jump

cmd sx_cd ${{
    # thumb=$(sxiv -fto "${PWD}"/*/.folder.jpg|head -1)
    # res=$(sx_select.sh "${PWD}")
    res=$(sx_select.sh)
    # dir="${thumb%/*}"

    if [[ "${res}" == "" ]]; then
        exit
    fi

    if [ -f "$res" ]; then
      cmd="select"
    elif [ -d "$res" ]; then
      cmd="cd"
    fi

    lf -remote "send $id $cmd \"$res\""
}}
map S sx_cd

map <f-2> $printf "%s\n" $fx | vidir -

map s
map sn
map ss
map st
map sn :{{ set sortby natural; set info; set reverse!; }}
map ss :{{ set sortby size; set info size; set reverse; }}
map st :{{ set sortby time; set info time; set reverse; }}

# cmd preview ${{
#     sxiv -s f $(previewer.sh $f)
# }}

# map P :preview

cmd preview ${{
    bspc rule -a \* -o state=floating focus=off
    p="$(previewer.sh "$f")"
    timeout 1.5 sxiv -a -b -g 500x280-10+10 "$p" &
}}
map - preview

cmd dragon %dragon-drag-and-drop -a -x $fx
map D dragon
